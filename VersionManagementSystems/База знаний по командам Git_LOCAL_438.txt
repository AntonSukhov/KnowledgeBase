/*1. Получение и установка настройки GIT*/

//Получить список всех настроек
git config --list 
git config -l
git config --list --show-origin
git config user.name
git config --show-origin user.name

--Результаты git config --list:
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager-core
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
user.name=Anton Sukhov
user.email=RealComrade2011@yandex.ru

--Результаты git config --list --show-origin:
file:C:/Program Files/Git/etc/gitconfig diff.astextplain.textconv=astextplain
file:C:/Program Files/Git/etc/gitconfig filter.lfs.clean=git-lfs clean -- %f
file:C:/Program Files/Git/etc/gitconfig filter.lfs.smudge=git-lfs smudge -- %f
file:C:/Program Files/Git/etc/gitconfig filter.lfs.process=git-lfs filter-process
file:C:/Program Files/Git/etc/gitconfig filter.lfs.required=true
file:C:/Program Files/Git/etc/gitconfig http.sslbackend=openssl
file:C:/Program Files/Git/etc/gitconfig http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
file:C:/Program Files/Git/etc/gitconfig core.autocrlf=true
file:C:/Program Files/Git/etc/gitconfig core.fscache=true
file:C:/Program Files/Git/etc/gitconfig core.symlinks=false
file:C:/Program Files/Git/etc/gitconfig pull.rebase=false
file:C:/Program Files/Git/etc/gitconfig credential.helper=manager-core
file:C:/Program Files/Git/etc/gitconfig credential.https://dev.azure.com.usehttppath=true
file:C:/Program Files/Git/etc/gitconfig init.defaultbranch=master
file:"C:/Users/\320\220\320\264\320\274\320\270\320\275\320\270\321\201\321\202\321\200\320\260\321\202\320\276\321\200/.gitconfig"     user.name=Anton Sukhov
file:"C:/Users/\320\220\320\264\320\274\320\270\320\275\320\270\321\201\321\202\321\200\320\260\321\202\320\276\321\200/.gitconfig"     user.email=RealComrade2011@yandex.ru

--Результаты git config user.name:
Anton Sukhov

--Результаты git config --show-origin user.name:
file:"C:/Users/\320\220\320\264\320\274\320\270\320\275\320\270\321\201\321\202\321\200\320\260\321\202\320\276\321\200/.gitconfig"     Anton Sukhov


//Настройка имени пользователя и электронной почты
git config --global user.name "Anton Sukhov"
git config --global user.email RealComrade2011@yandex.ru 

//Настройка тестового редактора
git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

//Насройка имени ветки по умолчанию
git config --global init.defaultBranch main

/*2. Получение помощи*/
git help config
git config --help      //полная информация по команде config
git config -h          //краткая информация по команде config

/*3. Создание Git репозитория в существующем каталоге*/

cd c:\Git\MyProject   //переходим к каталогу репозитория
git init

cd c:\Git\RemoteProject 
git init --bare       //создание голово (чистого) репозитория, он чаще всего является удаленным и содержит только системные файлы git

cd c:\Git\RemoteProject 
git init
git config --bool core.bare true

--Результаты git init:
Initialized empty Git repository in C:/Git/MyProject/.git/

git add *.cs                             //Добавление всех файлов типа cs в репозиторий
git commit -m "Initial project version"  //Фиксирование изменений и добавление комментария Initial project version

--Результаты git commit -m "Initial project version" 
[master (root-commit) bc28755] Initial project version
 1 file changed, 5 insertions(+)
 create mode 100644 Customer.cs
 
 
/*4. Клонирование репозитория*/
cd c:\Git\MyProjectClone
git clone c:\Git\MyProject ./                                         //Клонирование репозитория c:\Git\MyProject в текущую папку
git clone https://github.com/dotnet-architecture/eShopOnContainers ./ //Клонирование репозитория https://github.com/dotnet-architecture/eShopOnContainers в текущую папку
git clone https://github.com/AntonSukhov/WebApi.git ./

--Результаты git clone c:\Git\MyProject ./ 
Cloning into '.'...
done.

/*5. Получение состояния файлов репозитория*/
git status
git status --short
git status -s

--Результаты git status сразу же после клонирования

On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

--Результаты git status сразу же после добавления в репозиторий c:\Git\MyProjectClone файла Readme.txt
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        Readme.txt

nothing added to commit but untracked files present (use "git add" to track)

--Результаты git status -s
M  Customer.cs                   //отредактированные файлы
A  Readme.txt                    //файлы добавленные в отслеживаемые
A  WorkType.cs
?? Contract.cs                   //Новые неотслеживаемые файлы


/*6. Добавление файлов под версионный контроль*/
git add Readme.txt

--Результаты git status сразу же после добавления файла под версионный контроль
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   Readme.txt
		
/*7. Игнорирование файлов*/
cd c:\Git\MyProjectClone\
echo [Bb]in/ >.gitignore               //создание файла .gitignore с содержимым [Bb]in/
git add .gitignore 		

/*8. Просмотреть индексированные и неиндексированные изменения*/
git diff                        //показывает только неиндексированные изменения
git diff --staged               //показывает только индексированные изменения
git diff --check                //показывать список всех добавленных символов пробелов
git diff 0806c0851 1e460ce964d  //показать список всех изменений (различий) между двумя коммитами (0806c0851,1e460ce964d)

--Результаты git diff после обновления содержимого файла WorkType.cs
diff --git a/WorkType.cs b/WorkType.cs
index 91569b5..fc7017a 100644
--- a/WorkType.cs
+++ b/WorkType.cs
@@ -1,4 +1,4 @@
 public class WorkType
 {
-
+       public int Id { get; set; }
 }
\ No newline at end of file

--Результаты git diff --staged после обновления содержимого файла WorkType.cs
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..d3750dc
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,9 @@
+# User-specific files
+*.rsuser
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# Build results
+[Bb]in/
\ No newline at end of file
diff --git a/Contract.cs b/Contract.cs
new file mode 100644
index 0000000..4558985
--- /dev/null
+++ b/Contract.cs
@@ -0,0 +1,4 @@
+public class Contract
+{
+       public int Id {get; set;}
+}
\ No newline at end of file
diff --git a/Customer.cs b/Customer.cs
index e9cb09c..4c7fc0b 100644
--- a/Customer.cs
+++ b/Customer.cs
@@ -2,4 +2,6 @@ public class Customer
 {
        public int Id { get; set; }
        public int Name { get; set; }
+       public string Address { get; set; }
+       public string Phone { get; set; }
 }
diff --git a/Readme.txt b/Readme.txt
new file mode 100644
index 0000000..e69de29
diff --git a/WorkType.cs b/WorkType.cs
new file mode 100644
index 0000000..91569b5
--- /dev/null
+++ b/WorkType.cs
@@ -0,0 +1,4 @@
+public class WorkType
+{
+
+}
\ No newline at end of file

--результат git diff --check 
Models/DtoEmployee.cs:5: trailing whitespace.
+



/*8. Просмотреть индексированные и неиндексированные изменения c помощью внешнего инструмента сравнения*/
git config --global diff.tool kdiff3
cd c:\Git\MyProjectClone\
git difftool

Viewing (1/1): 'Readme.txt'
Launch 'kdiff3' [Y/n]? Y


/*9. Фиксирование изменений*/

git commit -m "My First Commit" 
git commit -a -m "Add property Name in class WorkType"              //перед выполнением не нужно выполнять команду git add
git commit -am "Add property Name in class WorkType"                //перед выполнением не нужно выполнять команду git add
git commit --amend                                                  //делает коммит и относит его к последнему коммиту
git commit --amend -m "c1"                                          //делает коммит и относит его к последнему коммиту и меняет старое сообщение коммита на новое "c1"  (чаще используется для корректировки старого сообщения коммита на новое)

--Результаты git commit -m "My First Commit"
[master e4918ec] My First Commit                  //имя ветки - master, часть контрольной суммы - e4918ec
 5 files changed, 20 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 Contract.cs
 create mode 100644 Readme.txt
 create mode 100644 WorkType.cs
 
 --Результаты git commit -a -m "Add property Name in class WorkType"
 [master b31ff0e] Add property Name in class WorkType
 1 file changed, 1 insertion(+)
 
 /*10. Удаление файла*/
 git rm Readme.txt
 git commit -a -m "Delete file Readme.txt" 
 
 --Результаты  git rm Readme.tx
 On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        deleted:    Readme.txt

git clean -n  //Имитирует (но не выполняет) удаление файлов		
git clean -f  //Принудительное удаление всех неотслеживаемых файлов в вашем рабочем каталоге (Выполнять только после проверки !!!!!!!!!!!!!!)
              Параметр -f (сокращение от слова force — заставить) означает принудительное удаление, подчеркивая, что вы действительно хотите это сделать
		

 /*11. Переименование файла*/
 git mv WorkType.cs DtoWorkType.cs    //переименовать класс WorkType.cs на DtoWorkType.cs
 
 /*12. Получение истории коммитов*/
 git log
 git log -p -2           //-p (--path) - показывает разницу (выводит патч), внесенную в каждый коммит. -2 - вывода только двух записей
 git log --stat          //сокращенная статистика для каждого коммита
 git log --pretty=oneline //Опция oneline выводит каждый коммит в одну строку,
 git log --pretty=format:"%h - %an, %ar : %s"   //формат вывода результата 
 git log testing        //история коммитов для ветки testing
 git log --all          //история коммитов для всех веток
 git log --oneline --graph --all         //--oneline - информация о коммите отображается кратко в одну строчку, --graph - графическое отображение последовательности коммитов веток
 git log --no-merges issue54..origin/master  //список коммитов текущей ветки issue54 и удаленной ветки origin/master !!!!!!!!!!!!!!!!!!

 
 --Результаты  git log --oneline --graph --all
 * 1183fe0 (HEAD -> master) Add property CreateDate to DtoContract.cs
| * ea03d42 (testing) Add property Number to DtoContract.cs
|/
* 36f8770 (tag: v1.2, origin/master, origin/HEAD) Add property Fax to Customer
* 9186187 Add property Fax to Customer
* bac55a5 (tag: v1.0) Update class DtoCustomer
* 7f794a3 Rename class Customer
* 09649e8 Rename class Customer
* 37a9e31 Add file Readme.txt
* bc28755 Initial project version
 
 
 --Результаты git log
 commit e8b02c3ba5cacbf1d07dc5bd25ab32eecdff0b35 (HEAD -> master)      //Начало блока относится к коммиту Rename class Contract and Customer 
Author: Anton Sukhov <RealComrade2011@yandex.ru>
Date:   Sun May 8 11:49:49 2022 +0300

    Rename class Contract and Customer

commit 97dc1906dacc2f3cedec2a3e97f098102fc4eed9
Author: Anton Sukhov <RealComrade2011@yandex.ru>
Date:   Sun May 8 11:47:42 2022 +0300

    Rename class WorkType

commit d8668b3a308ddeee0a4aa99e7ab701890a020200
Author: Anton Sukhov <RealComrade2011@yandex.ru>
Date:   Sun May 8 11:43:37 2022 +0300

...

commit e4918ecc9f298d782513d460a64bd9c787e3d458
Author: Anton Sukhov <RealComrade2011@yandex.ru>
Date:   Sun May 8 10:38:08 2022 +0300

    My First Commit

commit bc28755e8a1a814bae39816b5b0389fa69af3d68 (origin/master, origin/HEAD)
Author: Anton Sukhov <RealComrade2011@yandex.ru>
Date:   Sat May 7 10:51:45 2022 +0300

    Initial project version
 
 --Результаты git log -p -2
 commit e8b02c3ba5cacbf1d07dc5bd25ab32eecdff0b35 (HEAD -> master)      //Начало блока относится к коммиту Rename class Contract and Customer 
Author: Anton Sukhov <RealComrade2011@yandex.ru>
Date:   Sun May 8 11:49:49 2022 +0300

    Rename class Contract and Customer

diff --git a/Contract.cs b/DtoContract.cs
similarity index 100%
rename from Contract.cs
rename to DtoContract.cs
diff --git a/Customer.cs b/DtoCustomer.cs
similarity index 100%
rename from Customer.cs
rename to DtoCustomer.cs

commit 97dc1906dacc2f3cedec2a3e97f098102fc4eed9
Author: Anton Sukhov <RealComrade2011@yandex.ru>
Date:   Sun May 8 11:47:42 2022 +0300

    Rename class WorkType

diff --git a/WorkType.cs b/DtoWorkType.cs
similarity index 100%
rename from WorkType.cs
rename to DtoWorkType.cs

/*13. Отмена индексации файла*/
git reset HEAD DtoContract.cs
git restore --staged DtoContract.cs           //новая команда рекомендуется именно ей пользоваться вместо reset

--Результаты git reset HEAD DtoContract.cs
Unstaged changes after reset:
M       DtoContract.cs

/*14. Отмена существующих изменений файла*/
git checkout -- DtoContract.cs
git restore DtoContract.cs           //новая команда рекомендуется именно ей пользоваться вместо checkout


/*15. Работа с удаленным репозиторием*/

git remote
git remote -v                       //ключ -v, чтобы просмотреть адреса для чтения и записи, привязанные к репозиторию
git remote add origin-second C:\Git\MyProjectClone2

git fetch origin                    //выполняет получение всех изменений в удаленном репозитории origin, но не выполняет слияние их с локальным репозиторием (далее нужно выполнить git merge)
git pull                            //выполняет получение всех изменений в удаленном репозитории origin и пытается выполнить слияние (git merge) их с локальным репозиторием
git pull 
git pull origin featureA

git push origin master              //выполняет отправку изменений ветки master текущего репозитория на сервер origin
git push origin --delete test       //выполнение удаления ветки на сервере origin
git push -u origin featureA         //Создаёт отслеживаемую ветку featureA на удаленном сервере origin и выполняет отправку, и слияние коммитов из ветку featureA локального репозитория, в одноимённую ветку сервера origin (!!!!!!!!!)
                                    //В том случае, если ветка featureA не является отслеживаемой веткой origin/master , а вы хотите сделать её таковой. 
									//Выполнив команду git push -u origin featureA вы устанавливаете связь между той веткой, в которой вы находитесь и веткой featureA на удалённом сервере.
									//-u - сокращение --set-upstream,
                                    //Команду требуется выполнить единожды, чтобы потом можно было отправлять/принимать изменения лишь выполняя git push из ветки без указания всяких алиасов для сервера и удалённых веток. 
									//Это сделано для удобства.
git push -u origin featureB:featureBee //выполняет отправку изменений ветки featureB текущего репозитория в ветку featureBee на сервере origin
								

--Результаты git remote
origin

--Результаты git remote -v
origin  c:\Git\MyProject (fetch)
origin  c:\Git\MyProject (push)

--Результаты git fetch origin
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 283 bytes | 40.00 KiB/s, done.
From c:\Git\MyProject
   bc28755..37a9e31  master     -> origin/master 
   
--Результаты git pull 
Merge made by the 'ort' strategy.
 Readme.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 Readme.txt
 
--Результаты git push origin master 
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 376 bytes | 376.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To c:\Git\MyProject
   7f794a3..bac55a5  master -> master                          //7f794a3 - oldref, т.е. коммит, на который указывала ветка до отправки
                                                               //bac55a5 - newref, т.е. новый коммит, на который ветка указывает сейчас
															   //первый master - fromref, имя отправленной локальной ветки
															   //второй master - toref — имя ветки в удалённом репозитории, в которую были отправлены изменения.
   
--Если результат git push origin master !!!!!!!!!!!!!!:
refusing to update checked out branch: refs/heads/master
отказ от обновления извлеченной ветви: refs/heads/master


By default, updating the current branch in a non-bare repository is denied, 
because it will make the index and work tree inconsistent
with what you pushed, and will require 'git reset --hard' to match
the work tree to HEAD.

По умолчанию обновление текущей ветки в не обработанном (голом, чистом bare) репозитории запрещено, 
потому что это сделает индекс и рабочее дерево несовместимыми с тем, что вы отправили, и потребует «git reset --hard», чтобы сопоставить рабочее дерево с HEAD.

You can set the 'receive.denyCurrentBranch' configuration variable
to 'ignore' or 'warn' in the remote repository to allow pushing into
its current branch; however, this is not recommended unless you
arranged to update its work tree to match what you pushed in some
other way.

Вы можете установить для переменной конфигурации «receive.denyCurrentBranch» значение «игнорировать» или «предупреждать» в удаленном репозитории, 
чтобы разрешить отправку в текущую ветку; однако это не рекомендуется, если только вы не договорились обновить его рабочее дерево, чтобы оно соответствовало тому, что вы отправили в какой-либо
другой путь.

git config receive.denyCurrentBranch ignore

To squelch this message and still keep the default behaviour, set 'receive.denyCurrentBranch' configuration variable to 'refuse'.

Чтобы отключить это сообщение и сохранить поведение по умолчанию, задайте переменной конфигурации receive.denyCurrentBranch значение «отклонить».

git config receive.denyCurrentBranch refuse
 
 /*16. Работа с тегами*/
 git tag                                    //получение списка всех тегов
 git tag -a v1.0 -m "My version 1.0"        //создание аннотированного тега (-a)
 git tag v1.1                               //создание легковесного тэга
 git tag -a v1.2 -m "v1.2" 36f877           //создание тега для коммита 36f877
 git push origin v1.0                       //отправка тега v1.0 на удаленный сервер
 git push origin --tags                     //отправка всех тегов на удаленный сервер
 git tag -d v1.1                            //удаление легковесного тега v1.1
 git push origin --delete v1.1              //удаление тега на сервере
 
--Результаты  git push origin v1.0 
Enumerating objects: 1, done.
Counting objects: 100% (1/1), done.
Writing objects: 100% (1/1), 173 bytes | 173.00 KiB/s, done.
Total 1 (delta 0), reused 0 (delta 0), pack-reused 0
To c:\Git\MyProject
 * [new tag]         v1.0 -> v1.0
 
--Результаты git push origin --tags 
Enumerating objects: 1, done.
Counting objects: 100% (1/1), done.
Writing objects: 100% (1/1), 166 bytes | 166.00 KiB/s, done.
Total 1 (delta 0), reused 0 (delta 0), pack-reused 0
To c:\Git\MyProject
 * [new tag]         v1.1 -> v1.1
 * [new tag]         v1.2 -> v1.2
 
 --Результаты  git tag -d v1.1
 Deleted tag 'v1.1' (was 9186187)
 
 --Результаты  git push origin --delete v1.1
 To c:\Git\MyProject
 - [deleted]         v1.1
 
 
 /*17. Работа с псевдонимами (команд)*/
 git config --global alias.last "log -1 HEAD"   //Создание псевдонима last для команды log -1 HEAD - последний коммит
 
 git last                                       //использование псевдонима
 
 --Результаты git last
 commit 36f877062155733c9d92e9086d376f6f48d579f2 (HEAD -> master, tag: v1.2, origin/master, origin/HEAD)
Author: Anton Sukhov <RealComrade2011@yandex.ru>
Date:   Tue May 10 10:39:02 2022 +0300

    Add property Fax to Customer
	
/*18. Работа с ветками*/

git branch                  //Вывод списка всех веток
git branch -v               //Вывод последнего коммита на каждой из веток
git branch -vv              //Вывод последнего коммита на каждой из веток и информации об отслеживаемых удаленных ветках (перед этой командой рекомендуется выполнить команду git fetch или git fetch --all)
git branch testing          //Создание новой ветки testing, но не переключение на неё, т.е. HEAD пока, что ссылается на ветку master
git branch -d newTesting       //Удаление ветки newTesting 
git branch --move test testNew //Локально переименовать ветку test на ветку testNew
git branch -u origin/master    //Локальная ветка t135 теперь будет отслеживать за изменениями удаленной ветки master
git checkout testing        //Переключение на новую ветку testing,  т.е. HEAD ссылается на ветку testing
git checkout -b newTesting  //Создание новой ветки newTesting и переключение на неё,  т.е. HEAD ссылается на ветку newTesting
git checkout -b t135 origin/t135 //Создание новой ветки t135 на основании удаленной ветки rigin/t135, тем самым в локальном репозитории создаётся так называемая "ветка слежения"
git checkout -b issue54 "541c0ba802765b1815814a659629d2eebb06204b" //Создание новой ветки issue54, связанной с коммитом 541c0ba802765b1815814a659629d2eebb06204b и переключение на неё

git switch  testing         //Переключение на новую ветку testing,  т.е. HEAD ссылается на ветку testing
git switch -c newTesting    //Создание новой ветки newTesting и переключение на неё,  т.е. HEAD ссылается на ветку newTesting
git merge hotfix            //Слияние текущей ветки (например, master) с веткой hotfix. Результат слияния будет в текущей ветки (например, master).
git merge branch -m "C6"    //Слияние текущей ветки (например, master) с веткой branch и с указанием текста комметария "C6".
 
 
--Результаты git branch -vv 
  master bc56eaf [origin/master] Fix change                                   //Совпадения локальной и удаленной ветки master
* t135   f67a4d4 [origin/t135: ahead 1, behind 1] Update class DtoWorkType    //Несовпадения локальной и удаленной ветки t135:
                                                                              //ahead = 1 - у локальной ветки есть 1 коммита, который не отправлен на сервер.
																			  //behind = 1 - у удаленной ветки есть 1 коммит, который не отправлен на локальный репозиторий.

--Результат git merge hotfix 
Updating a1e329d..c155106
Fast-forward                //т.к. коммиты a1e329d и c155106 идут один за другим, то происходит просто перенесение ветки (master) с коммита a1e329d на c155106. Head ссылается на ветку master.
 DtoContract.cs | 1 +
 1 file changed, 1 insertion(+)
 
--Результат git merge iss53
Auto-merging DtoContract.cs
Merge made by the 'ort' strategy.       //Git выполняет простое трёхстороннее слияние, используя последние коммиты объединяемых веток и общего для них  родительского коммита.
 DtoContract.cs | 1 +
 DtoCustomer.cs | 1 +
 2 files changed, 2 insertions(+)
 
--Результат git merge iss54
Auto-merging Readme.txt
CONFLICT (content): Merge conflict in Readme.txt                  //Конфликт автоматического (трёхстороннего) слияния в ситуации 
Automatic merge failed; fix conflicts and then commit the result. //Нужно разрешать конфликты вручном режиме самостоятельно


/*18.1 Перебазирование (rebase)*/

Нет абсолютно никакой разницы в конечном результате между двумя показанными примерами, но перебазирование делает историю коммитов чище в отличии от слияния.
Если вы взглянете на историю перебазированной ветки, то увидите, что она выглядит абсолютно линейной: 
будто все операции были выполнены последовательно, даже если изначально они совершались параллельно.

git log --oneline --graph --all
git checkout experiment
git rebase master                             //осуществляется перебазирование текущей ветки experiment относительно ветки master: 
                                              //берётся общий родительский снимок (b21b7ec) двух веток (experiment и master) 
											  //определяется дельта каждого коммита (377b3d0) текущей ветки (experiment)
											  //дельта сохраняется во временный файл
											  //текущая ветка (experiment) устанавливается на последний коммит (2040d25) ветки (master), поверх которой вы выполняете перебазирование ,
											  //затем по очереди применяются дельты из временных файлов (скорее всего результатом их применения является создание коммита d362e4e и перенос ветки experiment на этот коммит)
git log --oneline --graph --all
git checkout master
git merge experiment
git log --oneline --graph --all


--Результат git log --oneline --graph --all
* 2040d25 (master) Add property Customer to class DtoContract
| * 377b3d0 (HEAD -> experiment) Add property Snils to class DtoCustomer
|/
* b21b7ec (origin/master, origin/HEAD) Add property TotalSum to DtoContractItem

--Результат git rebase master
Successfully rebased and updated refs/heads/experiment.

--Результат git log --oneline --graph --all
* d362e4e (HEAD -> experiment) Add property Snils to class DtoCustomer
* 2040d25 (master) Add property Customer to class DtoContract
* b21b7ec (origin/master, origin/HEAD) Add property TotalSum to DtoContractItem

--Результат git merge experiment
Updating 2040d25..d362e4e
Fast-forward
 DtoCustomer.cs | 1 +
 1 file changed, 1 insertion(+)
 
--Результат git log --oneline --graph --all
* d362e4e (HEAD -> master, experiment) Add property Snils to class DtoCustomer
* 2040d25 Add property Customer to class DtoContract
* b21b7ec (origin/master, origin/HEAD) Add property TotalSum to DtoContractItem


/*18.1.1 Интересное перемещение*/
git log --oneline --graph --all
git rebase --onto master server client            //Взять изменения из ветки client, которых нет в server (d7ef4ed и 617a9c4), и применить их на ветке master при помощи опции --onto
                                                  //«Переключись на ветку client, найди изменения относительно ветки server и примени их для ветки master».
git checkout master
git merge client
git log --oneline --graph --all

git rebase master server                          //Добавить наработки в master из ветки server. Вы можете выполнить перебазирование ветки server относительно ветки master без предварительного переключения на неё
git checkout master
git merge server
git branch -d client
git branch -d server
git log --oneline --graph --all

--Результат git log --oneline --graph --all
* f77eccb (HEAD -> server) Add property Name to class DtoWorkUnit
* 2b4176c Add property Id to class DtoWorkUnit
| * 617a9c4 (client) Add property ContractId to class DtoContractAllReport
| * d7ef4ed Add class DtoContractAllReport
|/
* 9a6804f Add DtoWorkUnit really
* 78a0fe5 Add DtoWorkUnit
| * 7616fde (master) Add property CreateDate to DtoReport
| * 4149ca2 Add DtoReport
|/
* bfd0dbf (origin/master, origin/HEAD) Add property Number

--Результат git rebase --onto master server client
Successfully rebased and updated refs/heads/client.

--Результат git log --oneline --graph --all
* 23c5247 (HEAD -> client) Add property ContractId to class DtoContractAllReport
* 55ce0b5 Add class DtoContractAllReport
* 7616fde (master) Add property CreateDate to DtoReport
* 4149ca2 Add DtoReport
| * f77eccb (server) Add property Name to class DtoWorkUnit
| * 2b4176c Add property Id to class DtoWorkUnit
| * 9a6804f Add DtoWorkUnit really
| * 78a0fe5 Add DtoWorkUnit
|/
* bfd0dbf (origin/master, origin/HEAD) Add property Number

--Результат git merge client
Updating 7616fde..23c5247
Fast-forward
 DtoContractAllReport.cs | 4 ++++
 1 file changed, 4 insertions(+)
 create mode 100644 DtoContractAllReport.cs
 
--Результат git log --oneline --graph --all
* 23c5247 (HEAD -> master, client) Add property ContractId to class DtoContractAllReport
* 55ce0b5 Add class DtoContractAllReport
* 7616fde Add property CreateDate to DtoReport
* 4149ca2 Add DtoReport
| * f77eccb (server) Add property Name to class DtoWorkUnit
| * 2b4176c Add property Id to class DtoWorkUnit
| * 9a6804f Add DtoWorkUnit really
| * 78a0fe5 Add DtoWorkUnit
|/
* bfd0dbf (origin/master, origin/HEAD) Add property Number

--Результат git rebase master server
Successfully rebased and updated refs/heads/server.

--Результат git log --oneline --graph --all
* 1ddc3a3 (HEAD -> server) Add property Name to class DtoWorkUnit
* eb27946 Add property Id to class DtoWorkUnit
* 007ee4e Add DtoWorkUnit really
* ae48479 Add DtoWorkUnit
* 23c5247 (master, client) Add property ContractId to class DtoContractAllReport
* 55ce0b5 Add class DtoContractAllReport
* 7616fde Add property CreateDate to DtoReport
* 4149ca2 Add DtoReport
* bfd0dbf (origin/master, origin/HEAD) Add property Number

--Результат git merge server
Updating 23c5247..1ddc3a3
Fast-forward
 DtoWorkType.cs | 4 +++-
 DtoWorkUnit.cs | 5 +++++
 2 files changed, 8 insertions(+), 1 deletion(-)
 create mode 100644 DtoWorkUnit.cs
 
--Результат git log --oneline --graph --all
* 1ddc3a3 (HEAD -> master) Add property Name to class DtoWorkUnit
* eb27946 Add property Id to class DtoWorkUnit
* 007ee4e Add DtoWorkUnit really
* ae48479 Add DtoWorkUnit
* 23c5247 Add property ContractId to class DtoContractAllReport
* 55ce0b5 Add class DtoContractAllReport
* 7616fde Add property CreateDate to DtoReport
* 4149ca2 Add DtoReport
* bfd0dbf (origin/master, origin/HEAD) Add property Number


/*19. Объединение нескольких коммитов в один*/
git log --oneline --graph --all                    --По результату анализа коммитов, хотим объединить ряд коммитов (с a8ae90e по cb3d1ac) в один
git reset --soft HEAD~2                            --4 - кол-во коммитов, которых я хочу объединить начиная с текущего, на которых ссылается head
git log --oneline --graph --all                    --На графике не отображаются 4 коммита
git commit -c ORIG_HEAD
git log --oneline --graph --all                    --Отображается один коммит, результат объединения нескольких коммитов

--результат git log --oneline --graph --all
* cb3d1ac (HEAD -> master) Add property  ContractCreateDate to class DtoContractAllReport
* a828738 Обновление скрипта scriptUpdateDb
* 5d8dc50 Обновление WorkTypeReferenceViewModel
* a8ae90e Обновление WorkTypeReferenceView
* 26f8188 (origin/master, origin/HEAD) C10

--результат git log --oneline --graph --all
* 26f8188 (HEAD -> master, origin/master, origin/HEAD) C10

--результат git commit -c ORIG_HEAD
[master 1e10036] Add property  ContractCreateDate to class DtoContractAllReport
 Date: Sat May 28 10:36:51 2022 +0300
 4 files changed, 3 insertions(+), 2 deletions(-)
 
--результат git log --oneline --graph --all
* 1e10036 (HEAD -> master) Add property  ContractCreateDate to class DtoContractAllReport
* 26f8188 (origin/master, origin/HEAD) C10

/*20. Препрятывание */


git status
git stash   --Запоминаю и прячу (как бы нет изменений в файле) все изменения
git log --oneline --graph --all

git stash list              --Получить список всех препрятанных изменений
git stash apply             --Применить только что препрятанные изменения
git stash apply stash@{0}   --Применить только что препрятанные изменения нулевого stash
git stash drop              --Удаление препрятанного изменения
git stash pop               --git stash apply + git stash drop
git stash -u                --Запоминает и прячет изменения во всех файлах в индексе, а также добавленные файлы, которых нет в индексе
git stash -p                --Выдаст список всех изменений и не будет ничего прятать, а вместо этого в интерактивном режиме спросит вас о том, какие из изменений вы хотите припрятать, а какие оставить в вашем рабочем каталоге
git stash branch T178       --Создание ветки с именем T178, перейдёт на коммит, на котором вы были, когда прятали свои наработки, применит на нём эти наработки и затем, если они применились успешно, удалит эти припрятанные изменения

--Результат первого  git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Models/DtoCustomer.cs

no changes added to commit (use "git add" and/or "git commit -a")

--Результат выполнения команды git stash
Saved working directory and index state WIP on master: 97a5ce9 commit2

--Результат второй команды  git status
On branch master
nothing to commit, working tree clean

--Результат команды  git log --oneline --graph --all
*   7ffc46b (refs/stash) WIP on master: 97a5ce9 commit2
|\
| * 4019ee2 index on master: 97a5ce9 commit2
|/
* 97a5ce9 (HEAD -> master) commit2


/*21. Удаление изменений (Reset)*/

git reset --hard HEAD~ -- --hard означает полное удаление.  HEAD~ означает "один коммит от последнего коммита"  (Важно!!!!, команда носит необратимый характер, поэтому перед выполнение подумать)


/*22. Изменение названия коммита*/

git commit -a -m "comment"

/*23. Выборочное применение изменений одной ветки к другой (cherry-pick)*/

git checkout master       --Переходит на нужную ветку (например, master) в которую мы будет добавлять нужные изменения коммита из другой ветки
git cherry-pick c435f4b5  --Указываем Id (можно часть) нужного коммита 


/*24. Служебные команды*/

--24.1 Информация о текущем коммите (cat-file)

git cat-file -p HEAD

--Результат команды git cat-file -p HEAD
tree ede1eb80b05f0450ba8f6b28c33ab64ee9acbf39
parent 01acc875a1fcc268f087092ce34d4cb7f9fd8a5d
author AntonSukhov <RealComrade2011@yandex.ru> 1673679933 +0300
committer AntonSukhov <RealComrade2011@yandex.ru> 1673679933 +0300

C10

--24.4 Информация о содержимом (дереве) текущего коммита ()

git ls-tree -r HEAD

--Результат команды git ls-tree -r HEAD
100644 blob 7807f4c45918e132aaa527ea52d675a5005e3cfd    Models/CustomerModel.cs
100644 blob 1766b467d974c2b7e460f298c5b1bffbb9c621f2    Models/DepartmentModel.cs
100644 blob 492716c9e6e41b37b390af742d8650d3de88e2c1    Models/EmployeeModel.cs
100644 blob e371b6ce374fba0f6cdc133cf4483f6761bb633a    Models/TicketModel.cs
100644 blob f4a868135ae269314b18420b37903ffe6aed4739    Models/WorkTypeModel.cs

--24.3 Информация о текущем состоянии индекса (ls-files)

git ls-files -s

--Результат команды git ls-files -s
100644 7807f4c45918e132aaa527ea52d675a5005e3cfd 0       Models/CustomerModel.cs
100644 1766b467d974c2b7e460f298c5b1bffbb9c621f2 0       Models/DepartmentModel.cs
100644 492716c9e6e41b37b390af742d8650d3de88e2c1 0       Models/EmployeeModel.cs
100644 e371b6ce374fba0f6cdc133cf4483f6761bb633a 0       Models/TicketModel.cs
100644 f4a868135ae269314b18420b37903ffe6aed4739 0       Models/WorkTypeModel.cs


