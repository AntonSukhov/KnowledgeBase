--1. Создание веб-приложения ASP.NET Core Net5 RazorPages

cd D:\Examples\ASP.Net.Core\RazorPages
dotnet new sln -n WebApplication1
dotnet new webapp --framework "net5.0" -o WebApplication1
dotnet sln add WebApplication1 

--1.1 Создание веб-приложения с последним framework, аутентификацией Individual и 
--БД SQL Server LocalDB

dotnet new webapp -n MyProjectName -au Individual --use-local-db

webapp: Это шаблон, который создает проект ASP.NET Core Web App и предназначен для создания веб-приложений с использованием Razor Pages
-n MyProjectName: Указывает имя вашего проекта.
-au Individual: Этот параметр указывает, что вы хотите использовать аутентификацию пользователей.
    Individual означает, что будет настроена аутентификация с использованием индивидуальных учетных записей пользователей. 
    Это включает в себя создание необходимых страниц для регистрации, входа в систему и управления учетными записями пользователей.
--use-local-db: Этот параметр указывает, что вы хотите использовать локальную базу данных SQL Server (LocalDB) для хранения данных. 


--2. Создание консольного приложения 

cd E:\Examples\Тесты собеседований и задания\Метанит\Code
dotnet new console --framework net7.0

--3. Собрать приложение

cd D:\Examples\ASP.Net.Core\RazorPages
dotnet build

--4. Запуск приложения

cd D:\Examples\ASP.Net.Core\RazorPages
dotnet run --project WebApplication1

cd D:\Examples\ASP.Net.Core\RazorPages\WebApplication1
dotnet run

dotnet run --launch-profile https  --запуск WebApp с учетом настройки Https из профиля 

--5. Добавить/удалить в проект Nuget-пакет

cd D:\Examples\ASP.Net.Core\RazorPages\WebApplication1
dotnet add package Newtonsoft.Json

cd D:\Examples\ASP.Net.Core\RazorPages\WebApplication1
dotnet remove package Newtonsoft.Json

--6. Создание Razor страницы

dotnet new page -n Index -o Pages/

--7. Создать приложение тестирования (XUnit)
cd E:\Examples\C#\Тестирование\XUnit\Base
dotnet new xunit

--8. Запуск всех тестов 
dotnet test

--9. Создание моделей БД PostgreSql с помощью scaffold

--В проект установить, если не установлены
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.Tools

dotnet ef dbcontext scaffold "Host=172.17.0.2;Database=DbAccounts;Username=postgres;Password=sa" Npgsql.EntityFrameworkCore.PostgreSQL -o EntityF
ramework/Models

-o EntityFramework/Models - папка где создадуться классы моделей БД.

--10. Генерация страницы регистрации с помощью .NET CLI

dotnet aspnet-codegenerator identity -dc IndentityWebApp.Data.ApplicationDbContext --files "Account.Register" --force

identity - Указывает, что вы хотите сгенерировать код для системы идентификации (Identity) в ASP.NET Core.

-dc (или --data-context): Указывает контекст базы данных, который будет использоваться для работы с данными. 
В данном случае, это IndentityWebApp.Data.ApplicationDbContext, что подразумевает, что у вас есть класс контекста базы данных, который управляет доступом к данным в приложении.

--files: Указывает, какие файлы или страницы вы хотите сгенерировать. 
В данном случае, "Account.Register" означает, что будет сгенерирована страница регистрации пользователей. 
Вы можете указать и другие файлы, такие как Account.Login, Account.Logout и т.д., если хотите сгенерировать их одновременно.

--force: Перезаписывает существующие файлы, если они уже существуют.



--11. Получить информацию о команде генерации объектов с помощью .NET CLI

dotnet aspnet-codegenerator identity -h

--12. Создание минимального API

dotnet new web -o SimpleApi -f net9.0

где -o SimpleApi - название каталога в котором будут храниться все файлы и каталоги API
    -f net9.0    - указывается номер версии .NET SDK, который будет использоваться API. 
    		   Если вы не укажете флаг -f, то будет использована версия .NET SDK, которая установлена по умолчанию на вашем компьютере.
    		   Обычно это последняя стабильная версия .NET, которая установлена на вашей системе. 
    		   Если у вас установлено несколько версий .NET SDK, то будет использована версия, которая указана в файле глобальных настроек 
    		   (например, в global.json, если он существует в вашем проекте или в родительских директориях).
		   Если у вас нет установленной версии .NET SDK, то команда не выполнится, и вы получите сообщение об ошибке.
