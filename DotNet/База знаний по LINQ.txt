--1. Разница двух типизированных коллекций

--1.1 Метод Except 

Пример 1 


var customers1 = new List<Customer>{ 
	new Customer{Id = 1, GroupId = 10}, 
	new Customer{Id = 3, GroupId = 10},
	new Customer{Id = 4, GroupId = 10},
	new Customer{Id = 5, GroupId = 12},
	new Customer{Id = 6, GroupId = 13}
};
		
var customers2 = new List<Customer>{ 
	new Customer{Id = 5, GroupId = 12},
	new Customer{Id = 6, GroupId = 13}
};

var results = new List<Customer>();

public class CustomerComparer : IEqualityComparer<Customer>   
{
	bool IEqualityComparer<Customer>.Equals(Customer o1, Customer o2)
	{            
		return (o1.Id.Equals(o2.Id));        
	}

	int IEqualityComparer<Customer>.GetHashCode(Customer obj)
	{
		if (Object.ReferenceEquals(obj, null))
			return 0;               

		return obj.Id.GetHashCode();       
	}
}

//В коллекцию results добавляем разность двух коллекций
results.AddRange(customers1.Except(customers2, new CustomerComparer()));

//Результаты:
Id:1 GroupId:10
Id:3 GroupId:10
Id:4 GroupId:10
Id:5 GroupId:12
Id:6 GroupId:13

--1.2 Метод ExceptBy Nuget пакета morelinq

Пример 1 

var entities = new List<Customer>{ 
	new Customer{Id = 1, GroupId = 10}, 
	new Customer{Id = 3, GroupId = 10},
	new Customer{Id = 4, GroupId = 10},
	new Customer{Id = 5, GroupId = 12},
	new Customer{Id = 6, GroupId = 13}
};
		
var results = new List<Customer>{ 
	new Customer{Id = 5, GroupId = 12},
	new Customer{Id = 6, GroupId = 13}
};

//В коллекцию results добавляем customer из entities, которых нет в results
results.AddRange(entities.ExceptBy(results, p => p.Id));

//Результаты:
Id:1 GroupId:10
Id:3 GroupId:10
Id:4 GroupId:10
Id:5 GroupId:12
Id:6 GroupId:13

--1.3 LeftJoin

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace IDSP.DAL
{
    /// <summary>
    /// Расширения типа данных <see cref="IQueryable{T}"/>.
    /// TODO: нужно разобраться с реализацией и сделать рефакторинг кода.
    /// </summary>
    public static class QueryableExtensions 
    {
        #region Поля

        internal static readonly MethodInfo EnumerableDefaultIfEmpty = typeof(Enumerable).GetMethods()
                                                                                         .First(x => x.Name == "DefaultIfEmpty" && 
                                                                                                     x.GetParameters().Length == 1);
        internal static readonly MethodInfo QueryableSelectMany = typeof(Queryable).GetMethods()
                                                                                   .Where(x => x.Name == "SelectMany" && 
                                                                                               x.GetParameters().Length == 3)
                                                                                   .OrderBy(x => x.ToString().Length)
                                                                                   .First();
        internal static readonly MethodInfo QueryableWhere = typeof(Queryable).GetMethods()
                                                                              .First(x => x.Name == "Where" && 
                                                                                          x.GetParameters().Length == 2);
        internal static readonly MethodInfo QueryableGroupJoin = typeof(Queryable).GetMethods()
                                                                                  .First(x => x.Name == "GroupJoin" && 
                                                                                              x.GetParameters().Length == 5);

        #endregion
        
        #region Методы

        /// <summary>
        /// Соединяет две коллекции с помощью левого соединения
        /// </summary>
        /// <typeparam name="TOuter"></typeparam>
        /// <typeparam name="TInner"></typeparam>
        /// <typeparam name="TKey"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="outer"></param>
        /// <param name="inner"></param>
        /// <param name="outerKeySelector"></param>
        /// <param name="innerKeySelector"></param>
        /// <param name="resultSelector"></param>
        /// <returns></returns>
        public static IQueryable<TResult> LeftJoin<TOuter, TInner, TKey, TResult>(
            this IQueryable<TOuter> outer,
            IQueryable<TInner> inner,
            Expression<Func<TOuter, TKey>> outerKeySelector,
            Expression<Func<TInner, TKey>> innerKeySelector,
            Expression<Func<TOuter, TInner, TResult>> resultSelector)
        {

            if (outer == null) throw new ArgumentNullException(nameof(outer));
            if (inner == null) throw new ArgumentNullException(nameof(inner));
            if (outerKeySelector == null) throw new ArgumentNullException(nameof(outerKeySelector));
            if (innerKeySelector == null) throw new ArgumentNullException(nameof(innerKeySelector));
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

            var keyValuePairHolderWithGroup = typeof(KeyValuePairHolder<,>).MakeGenericType(
                    typeof(TOuter),
                    typeof(IEnumerable<>).MakeGenericType(typeof(TInner))
                );
            var paramOuter = Expression.Parameter(typeof(TOuter));
            var paramInner = Expression.Parameter(typeof(IEnumerable<TInner>));

            var resultSel = Expression
                .Lambda(
                    Expression.MemberInit(
                        Expression.New(keyValuePairHolderWithGroup),
                        Expression.Bind(
                            keyValuePairHolderWithGroup.GetMember("Item1").Single(),
                            paramOuter
                        ),
                        Expression.Bind(
                            keyValuePairHolderWithGroup.GetMember("Item2").Single(),
                            paramInner
                        )
                    ),
                    paramOuter,
                    paramInner
                );

            var groupJoin = QueryableGroupJoin
                .MakeGenericMethod(
                    typeof(TOuter),
                    typeof(TInner),
                    typeof(TKey),
                    keyValuePairHolderWithGroup
                )
                .Invoke(
                    "ThisArgumentIsIgnoredForStaticMethods",
                    new object[]{
                        outer,
                        inner,
                        outerKeySelector,
                        innerKeySelector,
                        resultSel
                    }
                );


            var paramGroup = Expression.Parameter(keyValuePairHolderWithGroup);
            var collectionSelector = Expression.Lambda(
                            Expression.Call(
                                    null,
                                    EnumerableDefaultIfEmpty.MakeGenericMethod(typeof(TInner)),
                                    Expression.MakeMemberAccess(paramGroup, keyValuePairHolderWithGroup.GetProperty("Item2")))
                            ,
                            paramGroup
                        );

            var newResultSelector = new ResultSelectorRewriter<TOuter, TInner, TResult>(resultSelector).CombinedExpression;


            var selectMany1Result = QueryableSelectMany
                .MakeGenericMethod(
                    keyValuePairHolderWithGroup,
                    typeof(TInner),
                    typeof(TResult)
                )
                .Invoke(
                    "ThisArgumentIsIgnoredForStaticMethods",
                    new object[]
                    {
                        groupJoin,
                        collectionSelector,
                        newResultSelector
                    }
                );

            return (IQueryable<TResult>)selectMany1Result;
        }

        #endregion
    }


    internal class KeyValuePairHolder<T1, T2>
    {
        #region Свойства

        public T1 Item1 { get; set; }
        public T2 Item2 { get; set; }

        #endregion
    }

    internal class ResultSelectorRewriter<TOuter, TInner, TResult> : ExpressionVisitor
    {
        #region Поля
        
        private readonly ParameterExpression _oldTOuterParamExpression;
        private readonly ParameterExpression _oldTInnerParamExpression;
        private readonly ParameterExpression _newTOuterParamExpression;
        private readonly ParameterExpression _newTInnerParamExpression;

        #endregion

        #region Свойства
        public Expression<Func<KeyValuePairHolder<TOuter, IEnumerable<TInner>>, TInner, TResult>> CombinedExpression { get; }

        #endregion

        #region Конструторы

        public ResultSelectorRewriter(Expression<Func<TOuter, TInner, TResult>> resultSelector)
        {
            var resultSelectorLocal = resultSelector;
            _oldTOuterParamExpression = resultSelectorLocal.Parameters[0];
            _oldTInnerParamExpression = resultSelectorLocal.Parameters[1];

            _newTOuterParamExpression = Expression.Parameter(typeof(KeyValuePairHolder<TOuter, IEnumerable<TInner>>));
            _newTInnerParamExpression = Expression.Parameter(typeof(TInner));

            var newBody = Visit(resultSelectorLocal.Body);
            var combinedExpression = Expression.Lambda(newBody, new ParameterExpression[] { _newTOuterParamExpression, _newTInnerParamExpression });
            CombinedExpression = (Expression<Func<KeyValuePairHolder<TOuter, IEnumerable<TInner>>, TInner, TResult>>)combinedExpression;
        }

        #endregion
        
        #region Методы

        protected override Expression VisitParameter(ParameterExpression node)
        {
            if (node == _oldTInnerParamExpression)
                return _newTInnerParamExpression;
            else if (node == _oldTOuterParamExpression)
                return Expression.PropertyOrField(_newTOuterParamExpression, "Item1");
            else
                throw new InvalidOperationException($"Did not expect a parameter: {node}");
        }

        #endregion
    }
}
